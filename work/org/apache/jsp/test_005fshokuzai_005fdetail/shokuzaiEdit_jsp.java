/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2024-05-29 00:44:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.test_005fshokuzai_005fdetail;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.DateFormat;

public final class shokuzaiEdit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.DateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=windows-31j");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"content-type\" content=\"text/html; charset=windows-31j\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>食材編集ページ</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("//未入力チェックを行う関数\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function checkForm() {\r\n");
      out.write("  // セレクトボックスの要素を取得\r\n");
      out.write("  var unit = document.getElementById(\"unit\");\r\n");
      out.write("  var save = document.getElementById(\"save\");\r\n");
      out.write("  var genre = document.getElementById(\"genre\");\r\n");
      out.write("  // テキストボックスの要素を取得\r\n");
      out.write("  var materials = document.getElementById(\"materials\")\r\n");
      out.write("  var volume = document.getElementById(\"volume\")\r\n");
      out.write("  var quantity = document.getElementById(\"quantity\")\r\n");
      out.write("  var fi_date = document.getElementById(\"fi_date\");\r\n");
      out.write("  var ex_date = document.getElementById(\"ex_date\");\r\n");
      out.write("\r\n");
      out.write("  // 選択されているオプションのインデックスを取得\r\n");
      out.write("  var selectedUnitIndex = unit.selectedIndex;\r\n");
      out.write("  var selectedSaveIndex = save.selectedIndex;\r\n");
      out.write("  var selectedGenreIndex = genre.selectedIndex;\r\n");
      out.write("\r\n");
      out.write("  var radioButtons = document.getElementsByName(\"open_check\");\r\n");
      out.write("  var isChecked = false;\r\n");
      out.write("\r\n");
      out.write("  // 選択されているオプションが初期値（未選択）の場合、警告を表示し送信をキャンセル\r\n");
      out.write("  if (materials.value === \"\") {\r\n");
      out.write("    alert(\"食材名を入力してください\");\r\n");
      out.write("    return false;\r\n");
      out.write("  }\r\n");
      out.write("  if (volume.value === \"\") {\r\n");
      out.write("    alert(\"数量を入力してください\");\r\n");
      out.write("    return false;\r\n");
      out.write("  }\r\n");
      out.write("  if (quantity.value === \"\") {\r\n");
      out.write("    alert(\"個数を入力してください\");\r\n");
      out.write("    return false;\r\n");
      out.write("  }\r\n");
      out.write("  if (selectedUnitIndex === 0) {\r\n");
      out.write("    alert(\"単位を選択してください\");\r\n");
      out.write("    return false;\r\n");
      out.write("  }\r\n");
      out.write("   if (selectedSaveIndex === 0) {\r\n");
      out.write("\t    alert(\"保存方法を選択してください\");\r\n");
      out.write("\t    return false;\r\n");
      out.write("\t  }\r\n");
      out.write("  if (selectedGenreIndex === 0) {\r\n");
      out.write("\t    alert(\"ジャンルを選択してください\");\r\n");
      out.write("\t    return false;\r\n");
      out.write("\t  }\r\n");
      out.write("  if ( fi_date.value === \"\") {\r\n");
      out.write("\t    alert(\"記入日を入力してください\");\r\n");
      out.write("\t    return false;\r\n");
      out.write("\t  }\r\n");
      out.write("  if ( ex_date.value === \"\") {\r\n");
      out.write("\t    alert(\"賞味期限. 消費期限を入力してください\");\r\n");
      out.write("\t    return false;\r\n");
      out.write("\t  }\r\n");
      out.write("  // 開封チェック\r\n");
      out.write("   for (var i = 0; i < radioButtons.length; i++) {\r\n");
      out.write("      if (radioButtons[i].checked) {\r\n");
      out.write("        isChecked = true;\r\n");
      out.write("        break;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!isChecked) {\r\n");
      out.write("      alert(\"開封状況を選択してください\");\r\n");
      out.write("      return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  return true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/shokuzaiEdit.css\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"table\">\r\n");
      out.write("\t\t\t<div class=\"tablehead\">\r\n");
      out.write("\t\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/shokuzaie\" method=\"POST\" id=\"editForm\"\r\n");
      out.write("\t\t\t\tonsubmit=\"return checkForm();\">\r\n");
      out.write("\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t<caption>編集ページ</caption>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>商品名</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"text\"\r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"");
      out.print(session.getAttribute("item_name"));
      out.write("\" name=\"item_name\"></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>お気に入り</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"radio\" name=\"favorite\" value=\"1\">Yes\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"favorite\" value=\"0\">No\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"favorite\" value=\"0\"></td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>食材名</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"text\" name=\"materials_name\" id=\"materials\"\r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"");
      out.print(session.getAttribute("materials_name"));
      out.write("\"></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>数量</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"number\" name=\"volume\" id=\"volume\" max=\"5000000\"\r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"");
      out.print(session.getAttribute("volume"));
      out.write("\" min=\"1\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<select name=\"unit_id\" id=\"unit\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"\" selected disabled>選択必須</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"1\">g</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"2\">ml</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"3\">個</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t×\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"number\" name=\"quantity\" id=\"quantity\" max=\"5000000\"\r\n");
      out.write("\t\t\t\t\t\t\t\tmin=\"1\" value=\"");
      out.print(session.getAttribute("quantity"));
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>保存方法</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><select name=\"save_method\" id=\"save\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"\" selected disabled>選択必須</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"1\">冷蔵庫</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"2\">冷凍庫</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"3\">野菜室</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"4\">常温保存</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>開封状態</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"open_check\" id=\"open\" value=\"1\"> 開封済み\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"open_check\" id=\"open\" value=\"0\"> 未開封\r\n");
      out.write("<!--  \t\t\t\t\t\t\t\t<input type='hidden' value=\"0\" name=\"open_check\"></td>\r\n");
      out.write(" -->\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>ジャンル</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><select name=\"genre_id\" id=\"genre\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"\" selected disabled>選択必須</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"1\">肉類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"2\">野菜</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"3\">果物</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"4\">魚介類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"5\">乾物・海藻類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"6\">卵類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"7\">パン類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"8\">ごはん類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"9\">乳製品類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"10\">豆・豆腐類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"11\">麺類</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"12\">ルー・素</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"13\">和風調味料</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"14\">洋風調味料</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"15\">中華調味料</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"16\">その他</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>記入日</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"date\" name=\"filling_date\" id=\"fi_date\"\r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"");
      out.print(session.getAttribute("filling_date"));
      out.write("\" >\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<th>賞味期限．消費期限</th>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"date\" class=\"date\" name=\"expiration_date\" id=\"ex_date\"\r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"");
      out.print(session.getAttribute("expiration_date"));
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<div class=\"button\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"b\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/shokuzai'\">\r\n");
      out.write("\t\t\t\t\t\t\tキャンセル</button>\r\n");
      out.write("\t\t\t\t\t\t<br> <br>\r\n");
      out.write("\t\t\t\t\t\t<button type=\"submit\" class=\"btn\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"location.href='");
      out.print(request.getContextPath());
      out.write("/shokuzaie\">\r\n");
      out.write("\t\t\t\t\t\t\t保存</button>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
