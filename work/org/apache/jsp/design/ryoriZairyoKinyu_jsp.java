/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2024-05-28 01:31:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.design;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import test.*;
import java.sql.*;

public final class ryoriZairyoKinyu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("test");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=windows-31j");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"content-type\" content=\"text/html; charset=windows-31j\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>料理詳細ページ</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"ryoriZairyoKinyu.css\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://kit.fontawesome.com/8ff098a16e.js\"\r\n");
      out.write("\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<h1 class=\"top_title\">料理の材料記入ページ</h1>\r\n");
      out.write("\t\t<div class=\"right_container\">\r\n");
      out.write("\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/ryori\" method=\"POST\">\r\n");
      out.write("\t\t\t\t<div class=\"name\">\r\n");
      out.write("\t\t\t\t\t料理名:\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"name\" Required>\r\n");
      out.write("\t\t\t\t\t 分:\r\n");
      out.write("\t\t\t\t\t <input type=\"number\" name=\"time\" Required><br> <br>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"ingredientContainer\">\r\n");
      out.write("\t\t\t\t\t<div class=\"list\">\r\n");
      out.write("\t\t\t\t\t\t食材:\r\n");
      out.write("\t\t\t\t\t\t <input type=\"text\" name=\"zairyo\" Required>\r\n");
      out.write("\t\t\t\t\t\t 数 量:\r\n");
      out.write("\t\t\t\t\t\t <input type=\"number\" name=\"suryo\" max=\"500000000\" min=\"0\" Required>\r\n");
      out.write("\t\t\t\t\t\t単位:\r\n");
      out.write("\t\t\t\t\t\t<input type=\"number\" name=\"tani\" max=\"3\" min=\"1\" Required style=\"font-size: smaller;\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t");

						String errorMsg = (String) request.getAttribute("errorMsg");
						if (errorMsg != null) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<p>");
      out.print(errorMsg);
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t");

						}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"btn\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"ryoriZairyoKinyu.jsp\"><button type=\"button\" name=\"cancel\">キャンセル</button></a>\r\n");
      out.write("\t\t\t\t\t\t<button type=\"submit\" name=\"hozon\">料理の材料保存</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/remove\" method=\"POST\">\r\n");
      out.write("\t\t\t\t<div class=\"next\">\r\n");
      out.write("\t\t\t\t\tName:<input type=\"text\" name=\"name\" required><br><br>\r\n");
      out.write("\t\t\t\t\t");

						String msg = (String) request.getAttribute("errorMsg");
						if (msg != null) {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<p>");
      out.print(msg);
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t");

						}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<button type=\"submit\">削除</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"listing\">\r\n");
      out.write("\t\t\t");

				ResultSet rs1 = null;
				Connection con1 = null;
				PreparedStatement pst = null;

				try {
					Class.forName("org.postgresql.Driver");
					con1 = DriverManager.getConnection(
							"jdbc:postgresql://52.195.46.205:5432/Food_management",
							"postgres", "postgres");

					String sql = "SELECT materials_name,volume FROM recipe";

					pst = con1.prepareStatement(sql);

					rs1 = pst.executeQuery();
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<TABLE BORDER=\"1\">\r\n");
      out.write("\t\t\t\t<TR>\r\n");
      out.write("\t\t\t\t\t<TH>材料名</TH>\r\n");
      out.write("\t\t\t\t\t<TH>数量</TH>\r\n");
      out.write("\t\t\t\t</TR>\r\n");
      out.write("\t\t\t\t");

					while (rs1.next()) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<TR>\r\n");
      out.write("\t\t\t\t\t<TD>");
      out.print(rs1.getString(1));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<TD>");
      out.print(rs1.getString(2));
      out.write("</TD>\r\n");
      out.write("\t\t\t\t</TR>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t");

					}

					} catch (SQLException e) {
						e.printStackTrace();
					}
				
      out.write("\r\n");
      out.write("\t\t\t</TABLE>\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"left-container\">\r\n");
      out.write("\t\t<div class=\"total\">\r\n");
      out.write("\t\t\t<div class=\"box\">\r\n");
      out.write("\t\t\t\t<div class=\"slideshow-container\">\r\n");
      out.write("\t\t\t\t\t<div class=\"slider\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"img/beefstew.jpg\" alt=\"beer\"\r\n");
      out.write("\t\t\t\t\t\t\tstyle=\"width: 400px; height: 400px\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"slider\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"img/cheesecake.jpg\" alt=\"sasimi\"\r\n");
      out.write("\t\t\t\t\t\t\tstyle=\"width: 400px; height: 400px\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"slider\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"img/curry_rice.jpg\" alt=\"Ramen\"\r\n");
      out.write("\t\t\t\t\t\t\tstyle=\"width: 400px; height: 400px\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!--<img src=\"photos/momo.jpg\" alt=\"Food_image\"\r\n");
      out.write("\t\t\t\t\t\tstyle=\"width: 250px; height: 250px\">\r\n");
      out.write("\t\t\t\t</div>-->\r\n");
      out.write("\t\t\t<div class=\"medium_box\">\r\n");
      out.write("\t\t\t\t<!--<button id=\"rowAdder\" type=\"button\">タグの追加</button>-->\r\n");
      out.write("\t\t\t\t");

					ResultSet rs = null;
					Connection con = null;
					PreparedStatement pstmt = null;

					try {
						Class.forName("org.postgresql.Driver");
						con = DriverManager.getConnection(
								"jdbc:postgresql://52.195.46.205:5432/Food_management",
								"postgres", "postgres");

						String sql = "SELECT * FROM tag LIMIT 8";

						pstmt = con.prepareStatement(sql);

						rs = pstmt.executeQuery();
				
      out.write("\r\n");
      out.write("\t\t\t\t<TABLE BORDER=\"1\" style=\"width:100%\">\r\n");
      out.write("\t\t\t\t\t<TR>\r\n");
      out.write("\t\t\t\t\t\t<TH>ID</TH>\r\n");
      out.write("\t\t\t\t\t\t<TH>TAG_NAME</TH>\r\n");
      out.write("\t\t\t\t\t</TR>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t");

						while (rs.next()) {
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<TR>\r\n");
      out.write("\t\t\t\t\t\t<TD>");
      out.print(rs.getString(1));
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<TD>");
      out.print(rs.getString(2));
      out.write("</TD>\r\n");
      out.write("\t\t\t\t\t</TR>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t");

						}

						} catch (SQLException e) {
							e.printStackTrace();
						}
					
      out.write("\r\n");
      out.write("\t\t\t\t</TABLE>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script src=\"title.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
